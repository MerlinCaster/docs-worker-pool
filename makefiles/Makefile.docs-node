GIT_BRANCH=$(shell git rev-parse --abbrev-ref HEAD)
USER=$(shell whoami)

STAGING_URL="https://docs-mongodborg-staging.corp.mongodb.com"
STAGING_BUCKET=docs-mongodb-org-staging

PRODUCTION_URL="https://docs.mongodb.com"
PRODUCTION_BUCKET=docs-node

PREFIX=node
PROJECT=node
REPO_DIR=$(shell pwd)
SNOOTY_DB_USR = $(shell printenv MONGO_ATLAS_USERNAME)
SNOOTY_DB_PWD = $(shell printenv MONGO_ATLAS_PASSWORD)

.PHONY: help stage fake-deploy deploy deploy-search-index publish remote-includes api-docs

help: ## Show this help message
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-20s\033[0m %s\n", $$1, $$2}'
	@echo
	@echo 'Variables'
	@printf "  \033[36m%-18s\033[0m %s\n" 'ARGS' 'Arguments to pass to mut-publish'

publish: remote-includes ## Builds this branch's publishable HTML and other artifacts under build/public
	if [ ${GIT_BRANCH} = master ]; then rm -rf build/master build/public; fi
	giza make publish
	if [ ${GIT_BRANCH} = master ]; then mut-redirects config/redirects -o build/public/.htaccess; fi

next-gen-html:
	# snooty parse and then build-front-end
	echo "${SNOOTY_DB_PWD}" | snooty build "${REPO_DIR}" "mongodb+srv://${SNOOTY_DB_USR}:@cluster0-ylwlz.mongodb.net/snooty?retryWrites=true" || exit 0;
	cp -r "${REPO_DIR}/../../snooty" ${REPO_DIR};
	cd snooty; \
	echo "GATSBY_SITE=${PROJECT}" > .env.production; \
	echo "GATSBY_PARSER_USER=${USER}" >> .env.production; \
	echo "GATSBY_PARSER_BRANCH=${GIT_BRANCH}" >> .env.production; \
	npm run build -- --no-color; \
	cp -r "${REPO_DIR}/snooty/public" ${REPO_DIR};

stage: ## Host online for review
	mut-publish public ${STAGING_BUCKET} --prefix=${PROJECT} --stage ${ARGS}
	@echo "Hosted at ${STAGING_URL}/${PROJECT}/${USER}/${GIT_BRANCH}/"

### fake-deloy in the stitch case pushes the html not dirhtml into bucket
## must make html on master branch first
fake-deploy: build/public ## Create a fake deployment in the staging bucket
	mut-publish build/master/html ${STAGING_BUCKET} --prefix=${PROJECT}/draft-wip --deploy --verbose  --all-subdirectories  ${ARGS}
	@echo "Hosted at ${STAGING_URL}/${PROJECT}/draft-wip/index.html"

deploy: build/public api-docs ## Deploy to the production bucket
	mut-publish build/public ${PRODUCTION_BUCKET} --prefix=${PROJECT} --deploy --all-subdirectories ${ARGS}

	@echo "Hosted at ${PRODUCTION_URL}/${PROJECT}/index.html"

	$(MAKE) deploy-search-index

deploy-search-index: ## Update the search index for this branch
	@echo "Building search index"
	mut-index upload build/public -o ${PROJECT}-${GIT_BRANCH}.json -u ${PRODUCTION_URL}/${PROJECT} -g -s --exclude build/public/sdk/iOS

devbuild: docstools-build-theme
	rm -rf build/${GIT_BRANCH}
	make html
	make stage
